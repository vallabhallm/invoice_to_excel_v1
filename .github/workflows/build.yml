name: Build Distributions

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Run tests
      run: |
        poetry run pytest tests/test_models.py tests/test_extractors.py tests/test_basic.py --cov=src/invoice_processor --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml

  build-macos:
    needs: test
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install create-dmg imagemagick tesseract
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pyinstaller
        # Install all required dependencies manually
        # Prefect removed for PyInstaller compatibility
        pip install "pydantic>=2.5.0"
        pip install "opencv-python>=4.8.1"
        pip install "pytesseract>=0.3.10"
        pip install "PyPDF2>=3.0.1"
        pip install "pdf2image>=1.16.3"
        pip install "pillow>=10.1.0"
        pip install "openai>=1.6.0"
        pip install "anthropic>=0.8.0"
        pip install "pandas>=2.1.4"
        pip install "python-dotenv>=1.0.0"
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        pip install -e .
    
    - name: Create app icon
      run: |
        mkdir -p cd/assets/icons
        # Create a simple PNG icon if ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          magick -size 512x512 xc:'#2E86AB' -fill white -gravity center -font Helvetica-Bold -pointsize 120 -annotate +0-20 'IP' cd/assets/icons/app.png
          magick cd/assets/icons/app.png cd/assets/icons/app.icns
        else
          # Create a simple text file as fallback
          echo "IP" > cd/assets/icons/app.icns
        fi

    - name: Build macOS application
      run: |
        # Create a simple build directory
        mkdir -p cd/dist
        
        # Create a very basic PyInstaller spec file
        cat > cd/simple_macos.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        from pathlib import Path

        a = Analysis(
            ['../src/invoice_processor/main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'invoice_processor',
                'invoice_processor.main',
                'invoice_processor.models',
                'invoice_processor.extractors',
                'invoice_processor.utils',
                'invoice_processor.workflows',
                'pydantic',
                # 'prefect', # Removed for PyInstaller compatibility
                'typer',
                'rich',
                'openai',
                'anthropic',
                'pytesseract',
                'PIL',
                'cv2',
                'pandas',
                'dotenv',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=None,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=None)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='InvoiceProcessor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='InvoiceProcessor',
        )

        app = BUNDLE(
            coll,
            name='InvoiceProcessor.app',
            icon=None,
            bundle_identifier='com.invoiceprocessor.app',
        )
        EOF
        
        # Build with the spec file
        cd cd && pyinstaller simple_macos.spec

    - name: Create DMG
      run: |
        if command -v create-dmg >/dev/null 2>&1; then
          create-dmg \
            --volname "Invoice Processor" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            cd/dist/InvoiceProcessor-1.0.0-macOS.dmg \
            cd/dist/InvoiceProcessor.app
        else
          echo "create-dmg not available, skipping DMG creation"
          # Just create a zip as fallback
          cd cd/dist && zip -r InvoiceProcessor-1.0.0-macOS.zip InvoiceProcessor.app
        fi
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: |
          cd/dist/*.dmg
          cd/dist/*.zip
        retention-days: 30

  build-windows:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      shell: powershell
      run: |
        pip install --upgrade pip
        pip install pyinstaller
        Write-Host "PyInstaller version:"
        pyinstaller --version
        
        # Test PyInstaller immediately with a simple script
        Write-Host "Creating simple test script..."
        'print("Hello World from PyInstaller test")' | Out-File -FilePath "simple_test.py" -Encoding utf8
        
        Write-Host "Testing PyInstaller with simple script..."
        pyinstaller --onefile --console simple_test.py --name=SimpleTest --distpath=simple_dist --clean
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ PyInstaller works with simple script"
          Get-ChildItem simple_dist/
          Write-Host "Testing executable..."
          & ".\simple_dist\SimpleTest.exe"
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Executable runs successfully"
          } else {
            Write-Host "⚠️ Executable created but failed to run"
          }
        } else {
          Write-Host "❌ PyInstaller fails with simple script - critical issue"
          exit 1
        }
        
        # Install minimal dependencies for a basic build
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        pip install "python-dotenv>=1.0.0"
        
        # Install the package in development mode
        pip install -e .
    
    - name: Install Windows dependencies
      run: |
        # Install ImageMagick and Tesseract on Windows
        choco install imagemagick tesseract --yes
    
    - name: Create app icon
      shell: bash
      run: |
        mkdir -p cd/assets/icons
        # Create a simple PNG icon if ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          magick -size 512x512 xc:'#2E86AB' -fill white -gravity center -font Helvetica-Bold -pointsize 120 -annotate +0-20 'IP' cd/assets/icons/app.png
          magick cd/assets/icons/app.png cd/assets/icons/app.ico
        else
          # Create a simple text file as fallback
          echo "IP" > cd/assets/icons/app.ico
        fi

    - name: Build Windows executable
      shell: powershell
      run: |
        # Create a simple build directory
        New-Item -ItemType Directory -Force -Path "cd/dist"
        
        # Check if main.py exists first
        Write-Host "Checking if main.py exists..."
        if (Test-Path "src/invoice_processor/main.py") {
          Write-Host "✅ main.py found"
        } else {
          Write-Host "❌ main.py not found!"
          exit 1
        }
        
        # Get absolute path to main.py
        $MAIN_PY_PATH = (Resolve-Path "src/invoice_processor/main.py").Path
        Write-Host "Absolute path to main.py: $MAIN_PY_PATH"
        
        # Create a minimal working main script to test
        Write-Host "Creating minimal test version of main.py..."
        @'
import typer
from rich.console import Console

console = Console()
app = typer.Typer()

@app.command()
def hello():
    """Test command for Windows console output"""
    console.print("✅ Hello from Invoice Processor!")
    console.print("🪟 Windows console output is working!")
    console.print("This confirms the console application is functioning properly.")

if __name__ == "__main__":
    app()
'@ | Out-File -FilePath "minimal_main.py" -Encoding utf8
        
        # Try building the minimal version first
        Write-Host "Building minimal version with PyInstaller..."
        Set-Location "cd"
        pyinstaller --onefile --console --name=InvoiceProcessor ../minimal_main.py 2>&1 | Tee-Object -FilePath "minimal_build.log"
        
        $MINIMAL_EXIT_CODE = $LASTEXITCODE
        Write-Host "Minimal build exit code: $MINIMAL_EXIT_CODE"
        
        if ($MINIMAL_EXIT_CODE -eq 0) {
          Write-Host "✅ Minimal build succeeded!"
          Get-ChildItem dist/
          
          # Test the minimal executable
          Write-Host "Testing minimal executable..."
          & ".\dist\InvoiceProcessor.exe" hello
          
          Write-Host "Now trying full build with all features..."
          # Try full build (but don't fail if it doesn't work)
          pyinstaller --onefile --console --name=InvoiceProcessorFull --hidden-import=invoice_processor --hidden-import=typer --hidden-import=rich $MAIN_PY_PATH 2>&1 | Tee-Object -FilePath "full_build.log"
          $FULL_EXIT_CODE = $LASTEXITCODE
          Write-Host "Full build exit code: $FULL_EXIT_CODE"
          
          if ($FULL_EXIT_CODE -eq 0) {
            Write-Host "✅ Full build also succeeded! Using full version."
            # Rename full version to replace minimal
            Move-Item "dist/InvoiceProcessorFull.exe" "dist/InvoiceProcessor.exe" -Force
          } else {
            Write-Host "⚠️ Full build failed, but minimal version works"
          }
        } else {
          Write-Host "❌ Even minimal build failed"
          Get-Content "minimal_build.log" | Select-Object -Last 50
        }
        
        
        # Create test scripts and ZIP
        Write-Host "Creating test scripts and ZIP file..."
        if (Test-Path "cd/dist/InvoiceProcessor.exe") {
          Write-Host "✅ Found InvoiceProcessor.exe, creating ZIP with test scripts"
          Set-Location "cd/dist"
          
          # Create test scripts
          @'
@echo off
echo Testing Windows executable...
echo.
echo Running hello command:
echo ----------------------------------------
InvoiceProcessor.exe hello
echo.
echo Exit code: %ERRORLEVEL%
pause
'@ | Out-File -FilePath "test_windows_exe.bat" -Encoding ascii
          
          @'
Write-Host "Testing Windows executable with PowerShell..." -ForegroundColor Green
Write-Host ""
Write-Host "Running hello command:" -ForegroundColor Yellow
Write-Host "----------------------------------------"
& ".\InvoiceProcessor.exe" hello
Write-Host "Exit code: $LASTEXITCODE"
Read-Host "Press Enter to continue"
'@ | Out-File -FilePath "test_windows_exe.ps1" -Encoding utf8
          
          # Create ZIP
          Compress-Archive -Path "InvoiceProcessor.exe","test_windows_exe.bat","test_windows_exe.ps1" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
          Write-Host "✅ Created ZIP with executable and test scripts"
          Set-Location "../.."
        } else {
          Write-Host "❌ No executable found, creating debug ZIP"
          New-Item -ItemType Directory -Force -Path "cd/dist"
          Set-Location "cd/dist"
          
          "No executable could be built. Build details:" | Out-File -FilePath "README.txt" -Encoding utf8
          "Build timestamp: $(Get-Date)" | Out-File -FilePath "README.txt" -Append -Encoding utf8
          "Minimal build exit code: $MINIMAL_EXIT_CODE" | Out-File -FilePath "README.txt" -Append -Encoding utf8
          
          # Copy log files if they exist
          if (Test-Path "../minimal_build.log") {
            Copy-Item "../minimal_build.log" "."
          }
          if (Test-Path "../full_build.log") {
            Copy-Item "../full_build.log" "."
          }
          
          Compress-Archive -Path "*" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
          Write-Host "Created debug ZIP with logs"
          Set-Location "../.."
        }
    
    - name: Check for Windows artifact
      shell: powershell
      run: |
        Write-Host "Checking for artifact before upload:"
        if (Test-Path "cd/dist/InvoiceProcessor-Windows.zip") {
          Write-Host "✅ ZIP file found for upload"
          Get-ChildItem "cd/dist/InvoiceProcessor-Windows.zip"
          Write-Host "ZIP file is ready for upload"
        } else {
          Write-Host "❌ ZIP file not found, creating emergency ZIP"
          New-Item -ItemType Directory -Force -Path "cd/dist"
          "Emergency build - PyInstaller failed completely" | Out-File -FilePath "cd/dist/emergency.txt" -Encoding utf8
          Set-Location "cd/dist"
          Compress-Archive -Path "emergency.txt" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
          Set-Location "../.."
          Write-Host "Created emergency ZIP file"
        }
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: cd/dist/InvoiceProcessor-Windows.zip
        retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-dmg
        path: ./dist/
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-exe
        path: ./dist/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./dist/*.dmg
          ./dist/*.zip
        body: |
          ## Invoice Processor ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          - **macOS**: Download the `.dmg` file
          - **Windows**: Download the `.exe` file
          
          ### 🚀 Installation
          
          #### macOS
          1. Download the DMG file
          2. Open the DMG and drag the app to Applications
          3. Run the app from Applications folder
          
          #### Windows
          1. Download the EXE file
          2. Run the installer as administrator
          3. Follow the installation wizard
          
          ### 📋 Requirements
          
          - **macOS**: macOS 10.14+ (Mojave or later)
          - **Windows**: Windows 10/11 (64-bit)
          - **Optional**: OpenAI and/or Anthropic API keys for AI processing
          
          ### 🔧 Configuration
          
          After installation, configure your API keys through the application settings or by editing the `.env` file.
          
          For detailed instructions, see the [README](https://github.com/vallabhallm/invoice_to_excel_v1/blob/main/README.md).
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
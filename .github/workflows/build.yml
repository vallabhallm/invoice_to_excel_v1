name: Build Distributions

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Run tests
      run: |
        poetry run pytest tests/test_models.py tests/test_extractors.py tests/test_basic.py --cov=src/invoice_processor --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml

  build-macos:
    needs: test
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install create-dmg imagemagick tesseract
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pyinstaller
        # Install all required dependencies manually
        # Prefect removed for PyInstaller compatibility
        pip install "pydantic>=2.5.0"
        pip install "opencv-python>=4.8.1"
        pip install "pytesseract>=0.3.10"
        pip install "PyPDF2>=3.0.1"
        pip install "pdf2image>=1.16.3"
        pip install "pillow>=10.1.0"
        pip install "openai>=1.6.0"
        pip install "anthropic>=0.8.0"
        pip install "pandas>=2.1.4"
        pip install "python-dotenv>=1.0.0"
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        pip install -e .
    
    - name: Create app icon
      run: |
        mkdir -p cd/assets/icons
        # Create a simple PNG icon if ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          magick -size 512x512 xc:'#2E86AB' -fill white -gravity center -font Helvetica-Bold -pointsize 120 -annotate +0-20 'IP' cd/assets/icons/app.png
          magick cd/assets/icons/app.png cd/assets/icons/app.icns
        else
          # Create a simple text file as fallback
          echo "IP" > cd/assets/icons/app.icns
        fi

    - name: Build macOS application
      run: |
        # Create a simple build directory
        mkdir -p cd/dist
        
        # Create a very basic PyInstaller spec file
        cat > cd/simple_macos.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        from pathlib import Path

        a = Analysis(
            ['../src/invoice_processor/main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'invoice_processor',
                'invoice_processor.main',
                'invoice_processor.models',
                'invoice_processor.extractors',
                'invoice_processor.utils',
                'invoice_processor.workflows',
                'pydantic',
                # 'prefect', # Removed for PyInstaller compatibility
                'typer',
                'rich',
                'openai',
                'anthropic',
                'pytesseract',
                'PIL',
                'cv2',
                'pandas',
                'dotenv',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=None,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=None)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='InvoiceProcessor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='InvoiceProcessor',
        )

        app = BUNDLE(
            coll,
            name='InvoiceProcessor.app',
            icon=None,
            bundle_identifier='com.invoiceprocessor.app',
        )
        EOF
        
        # Build with the spec file
        cd cd && pyinstaller simple_macos.spec

    - name: Create DMG
      run: |
        if command -v create-dmg >/dev/null 2>&1; then
          create-dmg \
            --volname "Invoice Processor" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            cd/dist/InvoiceProcessor-1.0.0-macOS.dmg \
            cd/dist/InvoiceProcessor.app
        else
          echo "create-dmg not available, skipping DMG creation"
          # Just create a zip as fallback
          cd cd/dist && zip -r InvoiceProcessor-1.0.0-macOS.zip InvoiceProcessor.app
        fi
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: |
          cd/dist/*.dmg
          cd/dist/*.zip
        retention-days: 30

  build-windows:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        # Install Tesseract for OCR functionality
        choco install tesseract --yes
        echo "C:\Program Files\Tesseract-OCR" >> $GITHUB_PATH
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        
        # Install required dependencies (excluding problematic ones)
        pip install "pydantic>=2.5.0"
        pip install "opencv-python>=4.8.1"
        pip install "pytesseract>=0.3.10"
        pip install "PyPDF2>=3.0.1"
        pip install "pdf2image>=1.16.3"
        pip install "pillow>=10.1.0"
        pip install "openai>=1.6.0"
        pip install "anthropic>=0.8.0"
        pip install "pandas>=2.1.4"
        pip install "python-dotenv>=1.0.0"
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        
        # Install the package itself
        pip install -e .
        
        # Verify installation
        python -c "import invoice_processor; print('✅ Package installed successfully')"

    - name: Build Windows executable
      shell: powershell
      run: |
        # Create dist directory
        New-Item -ItemType Directory -Force -Path "dist"
        
        # Create PyInstaller spec file using line-by-line approach
        "# -*- mode: python ; coding: utf-8 -*-" | Out-File -FilePath "InvoiceProcessor.spec" -Encoding utf8
        "" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "a = Analysis(" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    ['src/invoice_processor/main.py']," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    pathex=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    binaries=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    datas=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    hiddenimports=[" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor.main'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor.models'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor.extractors'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor.utils'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'invoice_processor.workflows'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'pydantic'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'typer'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'rich'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'openai'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'anthropic'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'pytesseract'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'PIL'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'cv2'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'pandas'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "        'dotenv'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    ]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    hookspath=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    hooksconfig={}," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    runtime_hooks=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    excludes=['prefect', 'tests', 'pytest']," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    win_no_prefer_redirects=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    win_private_assemblies=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    cipher=None," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    noarchive=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        ")" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "pyz = PYZ(a.pure, a.zipped_data, cipher=None)" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "exe = EXE(" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    pyz," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    a.scripts," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    a.binaries," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    a.zipfiles," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    a.datas," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    []," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    name='InvoiceProcessor'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    debug=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    bootloader_ignore_signals=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    strip=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    upx=True," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    upx_exclude=[]," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    runtime_tmpdir=None," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    console=True," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    disable_windowed_traceback=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    argv_emulation=False," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    target_arch='x86_64'," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    codesign_identity=None," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        "    entitlements_file=None," | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        ")" | Out-File -FilePath "InvoiceProcessor.spec" -Append -Encoding utf8
        
        Write-Host "Created PyInstaller spec file"
        
        # Build executable
        Write-Host "Building Windows executable with PyInstaller..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "PyInstaller version: $(pyinstaller --version)"
        
        # Run PyInstaller with verbose output for debugging
        pyinstaller --clean --noconfirm --log-level INFO InvoiceProcessor.spec
        
        Write-Host "PyInstaller completed. Checking output..."
        if (Test-Path "dist") {
          Write-Host "Contents of dist directory:"
          Get-ChildItem "dist" -Recurse | ForEach-Object {
            $Size = if ($_.PSIsContainer) { "[DIR]" } else { "$($_.Length) bytes" }
            Write-Host "  $($_.Name) - $Size"
          }
        } else {
          Write-Host "❌ dist directory not created"
        }
        
        if (Test-Path "dist/InvoiceProcessor.exe") {
          Write-Host "✅ Executable created successfully"
          $ExeInfo = Get-ChildItem "dist/InvoiceProcessor.exe"
          Write-Host "Executable size: $($ExeInfo.Length) bytes"
          
          # Test the executable
          Write-Host "Testing executable..."
          try {
            $TestOutput = & "dist/InvoiceProcessor.exe" --help 2>&1
            Write-Host "✅ Executable runs successfully!"
            Write-Host "Help output (first 5 lines):"
            $TestOutput | Select-Object -First 5 | ForEach-Object { Write-Host "  $_" }
          } catch {
            Write-Host "⚠️ Executable test failed: $_"
          }
        } else {
          Write-Host "❌ Executable not created"
          Write-Host "Checking for any .exe files in dist:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" -Filter "*.exe" | ForEach-Object { Write-Host "Found: $($_.Name)" }
          }
          exit 1
        }
    
    - name: Create Windows distribution ZIP
      shell: powershell
      run: |
        # Create distribution ZIP
        Set-Location "dist"
        
        # Create test script for users using line-by-line approach
        "@echo off" | Out-File -FilePath "test_windows.bat" -Encoding ascii
        "echo Testing Invoice Processor Windows executable..." | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "echo." | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "echo Running executable:" | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "echo ----------------------------------------" | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "InvoiceProcessor.exe --help" | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "echo." | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "echo Exit code: %ERRORLEVEL%" | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        "pause" | Out-File -FilePath "test_windows.bat" -Append -Encoding ascii
        
        # Create ZIP with executable and test script
        if (Test-Path "InvoiceProcessor.exe") {
          Compress-Archive -Path @("InvoiceProcessor.exe", "test_windows.bat") -DestinationPath "InvoiceProcessor-Windows.zip" -Force
          Write-Host "✅ Created InvoiceProcessor-Windows.zip"
          
          # Verify ZIP contents
          $ZipInfo = Get-ChildItem "InvoiceProcessor-Windows.zip"
          Write-Host "ZIP file size: $($ZipInfo.Length) bytes"
        } else {
          Write-Host "❌ Executable not found for ZIP creation"
          exit 1
        }
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: dist/InvoiceProcessor-Windows.zip
        retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-dmg
        path: ./dist/
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-exe
        path: ./dist/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./dist/*.dmg
          ./dist/*.zip
        body: |
          ## Invoice Processor ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          - **macOS**: Download the `.dmg` file
          - **Windows**: Download the `.zip` file
          
          ### 🚀 Installation
          
          #### macOS
          1. Download the DMG file
          2. Open the DMG and drag the app to Applications
          3. Run the app from Applications folder
          
          #### Windows
          1. Download the ZIP file
          2. Extract the ZIP file to a folder of your choice
          3. Run InvoiceProcessor.exe from the extracted folder
          4. (Optional) Run test_windows.bat to verify installation
          
          ### 📋 Requirements
          
          - **macOS**: macOS 10.14+ (Mojave or later)
          - **Windows**: Windows 10/11 (64-bit)
          - **Optional**: OpenAI and/or Anthropic API keys for AI processing
          
          ### 🔧 Configuration
          
          After installation, configure your API keys through the application settings or by editing the `.env` file.
          
          For detailed instructions, see the [README](https://github.com/vallabhallm/invoice_to_excel_v1/blob/main/README.md).
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
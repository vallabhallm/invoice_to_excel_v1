name: Build Distributions

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
    
    - name: Run tests
      run: |
        poetry run pytest tests/test_models.py tests/test_extractors.py tests/test_basic.py --cov=src/invoice_processor --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml

  build-macos:
    needs: test
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install create-dmg imagemagick tesseract
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pyinstaller
        # Install all required dependencies manually
        # Prefect removed for PyInstaller compatibility
        pip install "pydantic>=2.5.0"
        pip install "opencv-python>=4.8.1"
        pip install "pytesseract>=0.3.10"
        pip install "PyPDF2>=3.0.1"
        pip install "pdf2image>=1.16.3"
        pip install "pillow>=10.1.0"
        pip install "openai>=1.6.0"
        pip install "anthropic>=0.8.0"
        pip install "pandas>=2.1.4"
        pip install "python-dotenv>=1.0.0"
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        pip install -e .
    
    - name: Create app icon
      run: |
        mkdir -p cd/assets/icons
        # Create a simple PNG icon if ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          magick -size 512x512 xc:'#2E86AB' -fill white -gravity center -font Helvetica-Bold -pointsize 120 -annotate +0-20 'IP' cd/assets/icons/app.png
          magick cd/assets/icons/app.png cd/assets/icons/app.icns
        else
          # Create a simple text file as fallback
          echo "IP" > cd/assets/icons/app.icns
        fi

    - name: Build macOS application
      run: |
        # Create a simple build directory
        mkdir -p cd/dist
        
        # Create a very basic PyInstaller spec file
        cat > cd/simple_macos.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        from pathlib import Path

        a = Analysis(
            ['../src/invoice_processor/main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'invoice_processor',
                'invoice_processor.main',
                'invoice_processor.models',
                'invoice_processor.extractors',
                'invoice_processor.utils',
                'invoice_processor.workflows',
                'pydantic',
                # 'prefect', # Removed for PyInstaller compatibility
                'typer',
                'rich',
                'openai',
                'anthropic',
                'pytesseract',
                'PIL',
                'cv2',
                'pandas',
                'dotenv',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=None,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=None)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='InvoiceProcessor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='InvoiceProcessor',
        )

        app = BUNDLE(
            coll,
            name='InvoiceProcessor.app',
            icon=None,
            bundle_identifier='com.invoiceprocessor.app',
        )
        EOF
        
        # Build with the spec file
        cd cd && pyinstaller simple_macos.spec

    - name: Create DMG
      run: |
        if command -v create-dmg >/dev/null 2>&1; then
          create-dmg \
            --volname "Invoice Processor" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --app-drop-link 600 185 \
            cd/dist/InvoiceProcessor-1.0.0-macOS.dmg \
            cd/dist/InvoiceProcessor.app
        else
          echo "create-dmg not available, skipping DMG creation"
          # Just create a zip as fallback
          cd cd/dist && zip -r InvoiceProcessor-1.0.0-macOS.zip InvoiceProcessor.app
        fi
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: |
          cd/dist/*.dmg
          cd/dist/*.zip
        retention-days: 30

  build-windows:
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pyinstaller
        # Install all required dependencies manually
        # Prefect removed for PyInstaller compatibility
        pip install "pydantic>=2.5.0"
        pip install "opencv-python>=4.8.1"
        pip install "pytesseract>=0.3.10"
        pip install "PyPDF2>=3.0.1"
        pip install "pdf2image>=1.16.3"
        pip install "pillow>=10.1.0"
        pip install "openai>=1.6.0"
        pip install "anthropic>=0.8.0"
        pip install "pandas>=2.1.4"
        pip install "python-dotenv>=1.0.0"
        pip install "typer>=0.13.0"
        pip install "rich>=13.7.0"
        pip install -e .
    
    - name: Install Windows dependencies
      run: |
        # Install ImageMagick and Tesseract on Windows
        choco install imagemagick tesseract --yes
    
    - name: Create app icon
      shell: bash
      run: |
        mkdir -p cd/assets/icons
        # Create a simple PNG icon if ImageMagick is available
        if command -v magick >/dev/null 2>&1; then
          magick -size 512x512 xc:'#2E86AB' -fill white -gravity center -font Helvetica-Bold -pointsize 120 -annotate +0-20 'IP' cd/assets/icons/app.png
          magick cd/assets/icons/app.png cd/assets/icons/app.ico
        else
          # Create a simple text file as fallback
          echo "IP" > cd/assets/icons/app.ico
        fi

    - name: Build Windows executable
      shell: bash
      run: |
        # Create a simple build directory
        mkdir -p cd/dist
        
        # Create a PyInstaller spec file optimized for Windows console applications
        cat > cd/simple_windows.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        from pathlib import Path

        a = Analysis(
            [r'../src/invoice_processor/main.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[
                'invoice_processor',
                'invoice_processor.main',
                'invoice_processor.models',
                'invoice_processor.extractors',
                'invoice_processor.utils',
                'invoice_processor.workflows',
                'pydantic',
                'typer',
                'rich',
                'rich.console',
                'rich.text',
                'rich.logging',
                'rich.progress',
                'openai',
                'anthropic',
                'pytesseract',
                'PIL',
                'cv2',
                'pandas',
                'dotenv',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=None,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=None)

        exe = EXE(
            pyz,
            a.scripts,
            [],
            exclude_binaries=True,
            name='InvoiceProcessor',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        coll = COLLECT(
            exe,
            a.binaries,
            a.zipfiles,
            a.datas,
            strip=False,
            upx=True,
            upx_exclude=[],
            name='InvoiceProcessor',
        )
        EOF
        
        # Check if main.py exists first
        echo "Checking if main.py exists..."
        ls -la src/invoice_processor/main.py || echo "main.py not found!"
        
        # Get absolute path to main.py
        MAIN_PY_PATH="$(pwd)/src/invoice_processor/main.py"
        echo "Absolute path to main.py: $MAIN_PY_PATH"
        
        # Check Python environment and installed packages
        echo "Python version:"
        python --version
        echo "Checking if invoice_processor package is importable:"
        python -c "import sys; sys.path.insert(0, 'src'); import invoice_processor; print('✅ Package importable')" || echo "❌ Package not importable"
        
        # Test if PyInstaller works at all with a simple script
        echo "Testing PyInstaller with simple script..."
        echo 'print("Hello from PyInstaller test")' > test_script.py
        cd cd && pyinstaller --onefile --console ../test_script.py --name=Test --distpath=test_dist
        TEST_EXIT_CODE=$?
        echo "Test PyInstaller exit code: $TEST_EXIT_CODE"
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "PyInstaller works with simple script"
          ls -la test_dist/
        else
          echo "PyInstaller fails even with simple script - environment issue"
        fi
        cd ..
        
        # Install the package in development mode
        echo "Installing package in development mode..."
        pip install -e .
        
        # Test if our main.py can run at all
        echo "Testing if main.py can run..."
        python "$MAIN_PY_PATH" --help || echo "❌ main.py failed to run"
        echo "Testing import of main module..."
        python -c "import sys; sys.path.insert(0, 'src'); from invoice_processor.main import app; print('✅ main module importable')" || echo "❌ main module not importable"
        
        # Try simple PyInstaller command with absolute path and hidden imports
        echo "Starting PyInstaller build with absolute path..."
        cd cd && pyinstaller \
          --onedir \
          --console \
          --name=InvoiceProcessor \
          --hidden-import=invoice_processor \
          --hidden-import=invoice_processor.main \
          --hidden-import=invoice_processor.models \
          --hidden-import=invoice_processor.extractors \
          --hidden-import=invoice_processor.utils \
          --hidden-import=invoice_processor.workflows \
          --hidden-import=typer \
          --hidden-import=rich \
          --hidden-import=pydantic \
          --collect-all=invoice_processor \
          "$MAIN_PY_PATH" --log-level INFO 2>&1 | tee pyinstaller_main.log
        
        # Check PyInstaller exit code
        PYINSTALLER_EXIT_CODE=$?
        echo "PyInstaller exit code: $PYINSTALLER_EXIT_CODE"
        
        if [ $PYINSTALLER_EXIT_CODE -ne 0 ]; then
          echo "PyInstaller failed! Capturing error details..."
          echo "Last 50 lines of any log files:"
          find . -name "*.log" -exec tail -50 {} \; 2>/dev/null || echo "No log files found"
          
          echo "Trying minimal PyInstaller command..."
          # Try absolute minimal approach
          pyinstaller --onefile --console "$MAIN_PY_PATH" --name=InvoiceProcessor --distpath=dist --workpath=build --specpath=.
          PYINSTALLER_EXIT_CODE=$?
          echo "Minimal PyInstaller exit code: $PYINSTALLER_EXIT_CODE"
          
          if [ $PYINSTALLER_EXIT_CODE -ne 0 ]; then
            echo "Minimal PyInstaller also failed! Trying spec file..."
            pyinstaller simple_windows.spec --log-level DEBUG 2>&1 | tee pyinstaller_debug.log
            PYINSTALLER_EXIT_CODE=$?
            echo "Spec file PyInstaller exit code: $PYINSTALLER_EXIT_CODE"
            echo "Last 100 lines of debug log:"
            tail -100 pyinstaller_debug.log || echo "No debug log created"
          fi
        else
          echo "PyInstaller completed successfully with simple command"
        fi
        
        # Check what was actually created
        echo "Checking what PyInstaller created:"
        find . -name "*.exe" -type f 2>/dev/null || echo "No exe files found"
        find . -name "InvoiceProcessor*" -type d 2>/dev/null || echo "No InvoiceProcessor directories found"
        
        # Check if dist directory was created and list contents
        if [ -d "cd/dist" ]; then
          echo "cd/dist exists, contents:"
          ls -la cd/dist/
        else
          echo "cd/dist does not exist, creating it"
          mkdir -p cd/dist
        fi
        
        # Check if PyInstaller created the executable directory
        if [ -d "cd/dist/InvoiceProcessor" ]; then
          echo "InvoiceProcessor directory found in cd/dist/"
          ls -la cd/dist/InvoiceProcessor/
        else
          echo "InvoiceProcessor directory not found, checking cd/ for build output"
          ls -la cd/
        fi
        
        # Create test scripts directly in the dist directory
        echo "Creating test scripts in cd/dist/"
        cat > cd/dist/test_windows_exe.bat << 'EOF'
        @echo off
        echo Testing Windows executable...
        echo.
        
        echo Checking executable location...
        if exist "InvoiceProcessor\InvoiceProcessor.exe" (
            echo Found executable in InvoiceProcessor directory
            set EXEC_PATH=InvoiceProcessor\InvoiceProcessor.exe
        ) else if exist "InvoiceProcessor.exe" (
            echo Found executable in current directory
            set EXEC_PATH=InvoiceProcessor.exe
        ) else (
            echo Executable not found!
            dir /b *.exe
            pause
            exit /b 1
        )
        
        echo Test 1: Running with --help flag:
        echo ----------------------------------------
        %EXEC_PATH% --help
        echo.
        echo Exit code: %ERRORLEVEL%
        echo.
        
        echo Test 2: Running with --version flag:
        echo ----------------------------------------
        %EXEC_PATH% --version
        echo.
        echo Exit code: %ERRORLEVEL%
        echo.
        
        echo Test 3: Running status command:
        echo ----------------------------------------
        %EXEC_PATH% status
        echo.
        echo Exit code: %ERRORLEVEL%
        echo.
        
        pause
        EOF
        
        cat > cd/dist/test_windows_exe.ps1 << 'EOF'
        Write-Host "Testing Windows executable with PowerShell..." -ForegroundColor Green
        Write-Host ""
        
        # Check for executable location
        if (Test-Path ".\InvoiceProcessor\InvoiceProcessor.exe") {
            Write-Host "Found executable in InvoiceProcessor directory" -ForegroundColor Green
            $execPath = ".\InvoiceProcessor\InvoiceProcessor.exe"
        } elseif (Test-Path ".\InvoiceProcessor.exe") {
            Write-Host "Found executable in current directory" -ForegroundColor Green
            $execPath = ".\InvoiceProcessor.exe"
        } else {
            Write-Host "Executable not found!" -ForegroundColor Red
            Get-ChildItem -Name "*.exe"
            Read-Host "Press Enter to continue"
            exit 1
        }
        
        Write-Host "Test 1: Running with --help flag:" -ForegroundColor Yellow
        Write-Host "----------------------------------------"
        & $execPath --help
        Write-Host "Exit code: $LASTEXITCODE"
        Write-Host ""
        
        Write-Host "Test 2: Running with --version flag:" -ForegroundColor Yellow
        Write-Host "----------------------------------------"
        & $execPath --version
        Write-Host "Exit code: $LASTEXITCODE"
        Write-Host ""
        
        Write-Host "Test 3: Running status command:" -ForegroundColor Yellow
        Write-Host "----------------------------------------"
        & $execPath status
        Write-Host "Exit code: $LASTEXITCODE"
        Write-Host ""
        
        Read-Host "Press Enter to continue"
        EOF
        
        # Verify what we have in dist
        echo "Final cd/dist contents:"
        ls -la cd/dist/
        
        # List all files and directories to see the actual structure
        echo "All contents in cd/dist/ (including hidden files):"
        find cd/dist/ -type f -name "*" 2>/dev/null || echo "No files found"
        find cd/dist/ -type d -name "*" 2>/dev/null || echo "No directories found"
        
        # Check what PyInstaller actually created
        echo "Checking for executable files:"
        find cd/dist/ -name "*.exe" -type f 2>/dev/null || echo "No .exe files found"
        
        # Create ZIP based on what actually exists
        echo "Creating ZIP file..."
        cd cd/dist
        
        # Check if InvoiceProcessor directory exists, if not look for exe files directly
        if [ -d "InvoiceProcessor" ]; then
          echo "Found InvoiceProcessor directory, creating ZIP with it"
          powershell Compress-Archive -Path "InvoiceProcessor","test_windows_exe.bat","test_windows_exe.ps1" -DestinationPath "InvoiceProcessor-Windows.zip"
        elif [ -f "InvoiceProcessor.exe" ]; then
          echo "Found InvoiceProcessor.exe file directly, creating ZIP with it"
          powershell Compress-Archive -Path "InvoiceProcessor.exe","test_windows_exe.bat","test_windows_exe.ps1" -DestinationPath "InvoiceProcessor-Windows.zip"
        else
          echo "Neither directory nor exe found, creating ZIP with all available files"
          powershell Compress-Archive -Path "*" -DestinationPath "InvoiceProcessor-Windows.zip"
        fi
        
        # Verify ZIP was created and move to expected location
        echo "Checking if ZIP was created:"
        ls -la *.zip || echo "No ZIP files found in current directory"
        
        # Go back to project root and check where the ZIP actually is
        cd ../..
        echo "Searching for ZIP file in the entire cd directory:"
        find cd/ -name "*.zip" -type f 2>/dev/null || echo "No ZIP files found anywhere in cd/"
        
        # List current directory to see the structure
        echo "Current directory (project root):"
        pwd
        ls -la
        
        # Ensure ZIP is in the right place for artifact upload
        if [ -f "cd/dist/InvoiceProcessor-Windows.zip" ]; then
          echo "ZIP found in expected location"
        else
          echo "ZIP not in expected location, checking if it exists elsewhere"
          # Try to find and move it
          ZIP_LOCATION=$(find cd/ -name "InvoiceProcessor-Windows.zip" -type f | head -1)
          if [ -n "$ZIP_LOCATION" ]; then
            echo "Found ZIP at: $ZIP_LOCATION"
            echo "Moving to expected location"
            cp "$ZIP_LOCATION" cd/dist/InvoiceProcessor-Windows.zip
          else
            echo "Creating a fallback ZIP with any available files"
            # Find any executable or create a minimal package
            EXE_FILE=$(find cd/ -name "*.exe" -type f | head -1)
            if [ -n "$EXE_FILE" ]; then
              echo "Found executable at: $EXE_FILE"
              # Copy to dist and create ZIP
              mkdir -p cd/dist
              cp "$EXE_FILE" cd/dist/InvoiceProcessor.exe
              cd cd/dist
              # Create test scripts here too
              echo 'echo "Run this executable: InvoiceProcessor.exe --help"' > test_windows_exe.bat
              echo 'Write-Host "Run this executable: .\InvoiceProcessor.exe --help"' > test_windows_exe.ps1
              powershell Compress-Archive -Path "*" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
              echo "Created fallback ZIP with found executable"
              cd ../..
            else
              echo "No executable found anywhere, creating comprehensive debug ZIP"
              mkdir -p cd/dist
              cd cd/dist
              echo "No executable could be built. Please check the build logs." > README.txt
              echo "Build timestamp: $(date)" >> README.txt
              echo "PyInstaller exit code: $PYINSTALLER_EXIT_CODE" >> README.txt
              echo "Python version: $(python --version)" >> README.txt
              echo "Working directory contents:" >> README.txt
              ls -la ../../ >> README.txt
              echo "" >> README.txt
              echo "=== PyInstaller Error Logs ===" >> README.txt
              
              # Copy any log files that were created
              if [ -f "../pyinstaller_main.log" ]; then
                echo "Main PyInstaller log:" >> README.txt
                cat ../pyinstaller_main.log >> README.txt
              fi
              if [ -f "../pyinstaller_debug.log" ]; then
                echo "Debug PyInstaller log:" >> README.txt
                tail -200 ../pyinstaller_debug.log >> README.txt
              fi
              
              # Also copy the logs as separate files
              cp ../pyinstaller_main.log . 2>/dev/null || echo "No main log found"
              cp ../pyinstaller_debug.log . 2>/dev/null || echo "No debug log found"
              
              powershell Compress-Archive -Path "*" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
              echo "Created comprehensive debug ZIP with logs"
              cd ../..
            fi
          fi
        fi
        
        # Final verification
        echo "Final check - ZIP file location:"
        ls -la cd/dist/InvoiceProcessor-Windows.zip || echo "ZIP file still not found"
    
    - name: Check for Windows artifact
      shell: bash
      run: |
        echo "Checking for artifact before upload:"
        if [ -f "cd/dist/InvoiceProcessor-Windows.zip" ]; then
          echo "✅ ZIP file found for upload"
          ls -la cd/dist/InvoiceProcessor-Windows.zip
          # Check if it's a debug ZIP
          if powershell Test-Zip cd/dist/InvoiceProcessor-Windows.zip 2>/dev/null; then
            echo "ZIP file is valid"
          else
            echo "⚠️  ZIP file may be invalid, but continuing with upload"
          fi
        else
          echo "❌ ZIP file not found, but this shouldn't happen with our fallbacks"
          echo "Contents of cd/dist/:"
          ls -la cd/dist/ || echo "cd/dist/ directory not found"
          # Create emergency ZIP
          mkdir -p cd/dist
          echo "Emergency build - PyInstaller failed completely" > cd/dist/emergency.txt
          cd cd/dist && powershell Compress-Archive -Path "emergency.txt" -DestinationPath "InvoiceProcessor-Windows.zip" -Force
          echo "Created emergency ZIP file"
        fi
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe
        path: cd/dist/InvoiceProcessor-Windows.zip
        retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-dmg
        path: ./dist/
    
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-exe
        path: ./dist/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ./dist/*.dmg
          ./dist/*.zip
        body: |
          ## Invoice Processor ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          - **macOS**: Download the `.dmg` file
          - **Windows**: Download the `.exe` file
          
          ### 🚀 Installation
          
          #### macOS
          1. Download the DMG file
          2. Open the DMG and drag the app to Applications
          3. Run the app from Applications folder
          
          #### Windows
          1. Download the EXE file
          2. Run the installer as administrator
          3. Follow the installation wizard
          
          ### 📋 Requirements
          
          - **macOS**: macOS 10.14+ (Mojave or later)
          - **Windows**: Windows 10/11 (64-bit)
          - **Optional**: OpenAI and/or Anthropic API keys for AI processing
          
          ### 🔧 Configuration
          
          After installation, configure your API keys through the application settings or by editing the `.env` file.
          
          For detailed instructions, see the [README](https://github.com/vallabhallm/invoice_to_excel_v1/blob/main/README.md).
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}